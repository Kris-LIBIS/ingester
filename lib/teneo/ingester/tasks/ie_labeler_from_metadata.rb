# frozen_string_literal: true

require "libis/tools/extend/hash"

require_relative "base/task"

module Teneo
  module Ingester
    module Tasks
      class IeLabelerFromMetadata < Teneo::Ingester::Tasks::Base::Task
        taskgroup :pre_ingest

        description "Generate IE item labels and names based on a pattern and metadata fields."

        help_text <<~STR
                     Rename the IE item object based on a regular expression.

                     By default the File item filename is used to label files, but this can be changed with the 'value' parameter.

                     First of all the value is matched against a regular expression defined in the 'pattern' parameter. This regex
                     should define groups that will be used to extract the common and unique pieces of the file property. Based on
                     the result of the regex matching and using references to the regex groups, a new label will be generated.
                     Optionally a different string for the item's name can be added in 'name'.

                     The value, label and name parameter values are generated by interpolating the given string using the 
                     [Kernel#sprintf](https://ruby-doc.org/core/Kernel.html#method-i-sprintf) syntax. The pattern groups can be 
                     referenced with m1, m2, ... and the item's properties by their respective names. The metadata fields
                     title(s), creator(s), subject(s), date(s), identifier(s) and source(s) are available for the interpolation as
                    'title', 'titles', 'creator', 'creators', etc.

                     Note: for the value parameter only the item properties are available.

                     By default the new label will be set as the metadata's title. This can be turned off by setting the parameter
                     'update_title' to false.
                  STR

        parameter pattern: nil,
                  description: "Regular expression for matching; nothing happens if nil."
        parameter value: "name",
                  description: "The item property to be used for the matching."
        parameter label: nil,
                  description: "String with interpolation placeholders for new value of item label property."
        parameter name: nil,
                  description: "String with interpolation placeholders for new value of item name property."
        parameter update_title: true,
                  description: "Update the Metadata title field with the new value of the item label."

        recursive true
        item_types Teneo::DataModel::IntellectualEntity

        protected

        def process(item, *_args)
          unless item.metadata_record
            debug "Skipping item because it does not have a metadata record", item
            return
          end
          pattern = parameter(:pattern)
          if pattern && !pattern.blank?
            value = item.interpolate(parameter(:value))
            m = Regexp.new(pattern).match(value)
            return if m.nil?
            vars = get_metadata_fields(item).merge(match_to_hash(m))
            if parameter(:label)
              file_label = item.interpolate(parameter(:label), vars)
              debug "Assigning label %s", item, file_label
              item.label = file_label
            end
            if parameter(:name)
              file_name = item.interpolate(parameter(:name), vars)
              debug "Renaming to %s", item, file_name
              item.name = file_name
            end
            if parameter(:update_title)
              metadata = item.metadata_record
              dc_record = Libis::Metadata::DublinCoreRecord.new(metadata.data)
              dc_record.title = item.label
              metadata.data = dc_record.to_xml
              metadata.save!
            end
            item.save!
          end
          item
        end

        def get_metadata_fields(item)
          metadata = item.metadata_record
          return {} unless metadata
          dc_record = Libis::Metadata::DublinCoreRecord.new(metadata.data)
          {
            title: dc_record.title.content,
            titles: dc_record.xpath("//title").map(&:content).join(", "),
            creator: dc_record.creator.content,
            creators: dc_record.xpath("//creator").map(&:content).join(", "),
            subject: dc_record.subject.content,
            subjects: dc_record.xpath("//subject").map(&:content).join(", "),
            date: dc_record.date.content,
            dates: dc_record.xpath("//date").map(&:content).join(", "),
            identifier: dc_record.identifier.content,
            identifiers: dc_record.xpath("//identifier").map(&:content).join(", "),
            source: dc_record.source.content,
            sources: dc_record.xpath("//source").map(&:content).join(", "),
          }.cleanup
        end
      end
    end
  end
end
